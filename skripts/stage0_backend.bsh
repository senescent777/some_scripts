function mangle_conf() {
	dqb "mangle_conf( ${1}, ${2}, ${3})"
	#TODO:jotain muutakin tähän, ehkä
}

echo "VAIH:isolubnux.cfg";sleep 5

##tällekin voisi tehdä josqs jotain
#function get_devuan() {
#	[ -d ${CONF_distros_dir} ] || ${smd} ${CONF_distros_dir}
#	cd ${CONF_distros_dir}
#
#		wget ${CONF_wget_opts} ${1}
#
#	sha256sum -c SHA256SUMS
#	[ $? -eq 0 ] || echo "https://www.youtube.com/watch?v=PjotFePip2M"
#}
#
#function make_src_dirs() {
#	dqb "s0b.make_s_DIrs"
#	${smd} ${CONF_keys_dir}
#	${smd} ${CONF_distros_dir}
#
#	case ${CONF_bloader} in paramersiksi tämäkin ?
#		grub)
#			${smd} -p ./boot/grub
#		;;
#		*)
#			${smd} ${CONF_bloader}	
#		;;
#	esac
#
#	${smd} ${CONF_pkgsdir2}
#	${smd} ./v
#}
##tarpeellinen?
##function cleanup() {
##	sudo umount ${CONF_source}
##}

#VAIH:conf_scripts_dir parametriksi vai ei? entä CONF_tmpdir?
function copy_main() {
	#debug=1
	dqb "copy_main(${1}, ${2}, ${3} )"

	[ x"${1}" != "x" ] || exit 2
	[ -d ${2} ] || exit 2 

	[ y"${3}" != "y" ] || exit 33
	[ -d ${3} ] || exit 34

	dqb "CHECKS PASSED"
	local f
	dqb "ONE BATCH"	
	csleep 1

	for f in $(find ${3} -type f -name '*.sh') ; do	
		dqb "${spc} ${f} ${2}/../.. "
		${spc} ${f} ${2}/../.. 
	done

	#HUOM.nuo 2 blokkia alla voisi yhdistää , "-or -name"
	dqb "TWO BATCH"
	csleep 1

	for f in $(find ${1} -type f -name '*.sh') ; do
		dqb "${spc} ${f} ${2} "
		${spc} ${f} ${2}
	done
	
	dqb "PENNY AND A DIME"
	csleep 1

	for f in $(find ${1} -type f -name '*.bz2') ; do
		dqb "${spc} ${f} ${2}"
		${spc} ${f} ${2}
	done

	dqb "copy_main() donw\n"
}

#VAIH:voisikohan ottaa hyötykäyttöönm? esim se sq-xhroot--ymp konftdsto
#tilapäisesti viritys missä conf samassa paketissa .deb kanssa (041025)
#sudo cat" 1 ideqa, mangle_conf() toinen
#.. jospa se devuan.conf olisi se juttu, lähdehmistoon moinen ja sit jtain
#.. vielä d.c squash-hmistoon EIKU
function copy_conf() {
	#debug=1

	dqb "copy_conf(${1}, ${2} , ${3})"
	[ x"${1}" != "x" ] || exit 2
	[ x"${2}" != "x" ] || exit 2
	[ -z ${3} ] && exit 3
	[ -d ${3} ] || exit 4

	dqb "PARAMS OK"
	#HUOM.041025: *.bash.conf ei tarttisi mennä kiekolle asti(TEHTY)

	if [ x"${CONF_scripts_dir}" != "x" ] ; then 
		for f in $(find ${CONF_scripts_dir} -type f -name '*.conf' | grep -v bash) ; do
			dqb "${spc} ${f}  ${3}/../.."
			${spc} ${f} ${3}/../.. #${CONF_tmpdir}		
		done

		csleep 1
	fi

	#nykyään vähän erilainen upload kuin ao. blokkia kiroittaessa
	if [ -s ${3}/upload.sh ] || [ -s ${3}/extras.tar.bz2 ] ; then 
		for f in ${CONF_g2} ; do mangle_conf ${f} ${3}/${2}.conf ; done
	fi

	utfile=${3}/${2}.conf
	#HUON.041025:manlge_conf():iin pitäisi vähitellen keksiä sopiva sisältö
	#... ja CONF_G1 kanssa 

	for f in ${CONF_g1} ; do mangle_conf ${f} ${utfile} ; done

	echo -n "src=/" >> ${utfile}
	echo -n "$" >> ${utfile}
	echo -n "{TARGET_pad2}" >> ${utfile}	

	echo -n "tmpdir=" >> ${utfile}
	echo -n "$" >> ${utfile}
	echo -n "{TARGET_tmpdir}" >> ${utfile}	

	echo -n "pkgdir=" >> ${utfile}
	echo -n "$" >> ${utfile}
	echo -n "{TARGET_pkgdir}" >> ${utfile}	

	#jatkosa niin että grepattaisiin oletus-konftdstosta hakusanan muaksia kohde-tdstoon (näinnkö se meni 2+ vuotta sitten? ehkä)
	mangle_conf TARGET_to_ram ${utfile}
	mangle_conf TARGET_nosu_do ${utfile}

	dqb "sudo cat ${1}/${2}.conf >> ${utfile}"
	sudo cat ${1}/${2}.conf >> ${utfile} #odio
	csleep 3

	dqb "copy_conf() donw\n"
	sleep 1
}

#VAIH:target_dgst0 pois tsätä fktiosta, kutsuvaan koodiin (sitten josqs)
#pitäisikö tämän fktio olla kopsata tsummia?
function copy_sums() {
	#debug=1
	dqb "copy_syms(${1}, ${2})" #tämäkö qsee?

	[ -z ${1} ] && exit 2
	#[ -d ${1} ] || exit 3 #ei tätä koska alempana x
	[ -z ${2} ] && exit 4

	dqb "pars ok"
	pwd
	csleep 1
#
#	#pitäisiköä avainkikkailun olla erillisessä fktiossa?
#	#niinja miten avaimet+squ.ash? tarttisiko jotain kikkailua?

	if [ -d ${1} ] ; then
		dqb "JI"
		#jos lähde olemassa, mitä sitten? pitäisi varmaan kopsata jotain jonnekin?
	else
		dqb "NO ${1} / \${TARGET_DGST0} , YSINBF DEFAYLT KEYDIR "

		if [ -d ${2} ] ; then
			dqb "${2}  ALREADY EXZUISWTS"
		else
			${smd} -p ${2}
		fi

		#VAIH:tämä kohta uusiksi (jatkossa jos .bz3 sisältäisi julk avaimet)
		dqb "${spc} ${CONF_keys_dir}/${TARGET_Dkname1} ${2}"
		${spc} ${CONF_keys_dir}/${TARGET_Dkname1} ${2}
		${spc} ${CONF_keys_dir}/${TARGET_Dkname2} ${2}
	fi

	dqb "copy_syms(${1}, ${2}) dn0w\n"
}

#$c_tgt-> $3 jatkossa?
function bootloader() {
	#debug=1
	dqb "bootloader(${1}, ${2}, ${3})"

	[ x"${1}" != "x" ] || exit 2
	[ x"${2}" != "x" ] || exit 2
	[ x"${CONF_target}" != "x" ] || exit 3
	[ -d ${CONF_target} ] || exit 3

	dqb "pars_ok"
	csleep 3

	local ks2
	ks2=""
	local f
	f=""
	local t
	t=""

	[ ${debug} -eq 1 ] && ls -las ${CONF_target};sleep 6

	#HUOM.jos touch-komentoja tarttee käyttää niin mieluummin joka caseen erikseen koska x, stage0f tapa aih sekaannusta sha512-hommien kanssa (?)
	case ${1} in
		isolinux)

			dqb "${spc} -a ${3}/isolinux/ ${CONF_target} || exit 8"
			csleep 1

			${spc} -a ${3}/isolinux/ ${CONF_target} || exit 8
			ks2=${2}/isolinux
			#[ -d ${ks2} ] || exit 9
			csleep 1

			[ ${debug} -eq 1 ] && find ${3}/isolinux -type f -name '*.cfg'
			csleep 5

			#jos siirtäisi ennen case;a nää, pienin muutoksin
			dqb "${smr} ${CONF_target}/isolinux/*.cfg"
			${smr} ${CONF_target}/isolinux/*.cfg
			${smr} ${CONF_target}/isolinux/*.png

			csleep 2
			dqb "TRYI1NG T0 R3PLACE IS0LINUX.CGF"

			for f in $(find ${ks2} -name '*.cfg') ; do
				dqb "spc ${f} ${CONF_target}/isolinux/"
				${spc} ${f} ${CONF_target}/isolinux/
			done

			#jos ei muuta keksi niln -s /r/l/m/i $tgt
			ls -las ${CONF_target}/isolinux/*.cfg || exit			
			csleep 2
			dqb "PNG"	

			for f in $(find ${ks2} -name '*.png') ; do
				dqb "spc ${f} ${CONF_target}/isolinux/"
				${spc} ${f} ${CONF_target}/isolinux/
			done
		;;
		grub)
			ks2=${2}/boot #jos siirtäisi ennen case;a nää
			
			if [ -d ${ks2} ] ; then
				${spc} -a ${3}/boot/ ${CONF_target} || exit 8
	
				#jos ei automaagisesti jatkossa
				${smr} ${CONF_target}/boot/grub/*.cfg
				${smr} ${CONF_target}/boot/grub/*.png
				
				for f in $(find ${ks2} -name '*.cfg') ; do
					dqb "spc ${f} ${CONF_target}/boot/grub"
					${spc} ${f} ${CONF_target}/boot/grub
				done

				#TODO:tähänkin reagointi puuttuvaan konftdstoon

				for f in $(find ${ks2} -name '*.png') ; do
					dqb "spc ${f} ${CONF_target}/boot/grub"
					${spc} ${f} ${CONF_target}/boot/grub
				done	
			fi
		;;
		*)
			echo "https://www.youtube.com/watch?v=PjotFePip2M"
			exit 11
		;;
	esac

	dqb "bootloader(${1}, ${2}) EN0D\n"
}

#VAIH:conf_t ja conf_s parametriksi
function make_tgt_dirs() {
	dqb "s0b.MAKE_t_DIRS( ${1} , ${2}, ${3})"
	csleep 1

	[ x"${1}" != "x" ] || exit 99
	[ x"${1}" != "x/" ] || exit 100
	[ -z ${3} ] && exit 101 #WTUN KAARISULKEET 666!!!

	dqb "${1} ok"
	csleep 1

	#HUOm. cource_jutut kai toisessa fktiossa kuiotenkin?
	[ y"${2}" != "y" ] || exit 101
	[ -d ${2} ] || ${smd} -p ${2}

	dqb "PARAMZx OK"
	csleep 1

	dqb "${2} ok?"
	${sco} 0:0 ${2}
	${scm} 0755 ${2}
	
	${sco} -R ${n}:${n} ${1} #TODO:$n parametriksi?
	${scm} 0755 ${1}	

	if [ ! -d ${1} ] ; then
		dqb "mkdir ${1}";sleep 6
		${smd} -p ${1}
	else
		dqb "rm ${1}";sleep 6
		${smr} -rf ${1};sleep 1
	fi
	
	[ -d ${1}/live ] || ${smd} -p ${1}/live
	${sco} -R ${n}:${n} ${1}/live

	[ -d ${1}/${TARGET_DIGESTS_dir} ] || ${smd} -p ${1}/${TARGET_DIGESTS_dir}
	${sco} -R ${n}:${n} ${1}/${TARGET_DIGESTS_dir}/..

	dqb "BLOADER"
	#[ -d ${1}/${3} ] || ${smd} -p ${1}/${3}
	[ -d ${1}/${3} ] && ${sco} -R ${n}:${n} ${1}/${3}
	${sco} 0:0 ${1}
	csleep 1

	#11725:tämä vaikutti puuttuvan
	[ -d ${1}/${TARGET_pad_dir} ] || ${smd} -p ${1}/${TARGET_pad_dir}

	[ -d ${1}/../out ] || ${smd} -p ${1}/../out
	${sco} -R ${n}:${n} ${1}/../out
	${scm} 0755 ${1}/../out

	#miten oikeydet?
	[ -d ${CONF_squash_dir} ] || ${smd} -p ${CONF_squash_dir}

	#TODO:avainhakemisto (mitä siitä?)

	#ls -la  ${1};sleep 6 dbq taakse
	echo "...done\n"
}

#tämän saman joutaisitehdä useammalle tgt-hmiston alaiselle
function default_process() {
	dqb "nt default_process(${1})"
	#-z myös?
	[ -d ${1} ] || exit 666

	${sco} -R 0:0 ${1}
	${scm} 0755 ${1}
	${scm} 0444 ${1}/*

	dqb "xt default_process(${1})\n"
}